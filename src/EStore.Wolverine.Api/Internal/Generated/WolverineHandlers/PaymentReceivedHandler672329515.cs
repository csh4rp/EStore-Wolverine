// <auto-generated/>
#pragma warning disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;

namespace Internal.Generated.WolverineHandlers
{
    // START: PaymentReceivedHandler672329515
    public class PaymentReceivedHandler672329515 : Wolverine.Runtime.Handlers.MessageHandler
    {
        private readonly Microsoft.EntityFrameworkCore.DbContextOptions<EStore.Wolverine.Infrastructure.Database.Contexts.EStoreDbContext> _dbContextOptions;
        private readonly Microsoft.Extensions.Logging.ILogger<EStore.Wolverine.Application.EventHandlers.Payments.PaymentReceivedEventHandler> _logger;

        public PaymentReceivedHandler672329515(Microsoft.EntityFrameworkCore.DbContextOptions<EStore.Wolverine.Infrastructure.Database.Contexts.EStoreDbContext> dbContextOptions, Microsoft.Extensions.Logging.ILogger<EStore.Wolverine.Application.EventHandlers.Payments.PaymentReceivedEventHandler> logger)
        {
            _dbContextOptions = dbContextOptions;
            _logger = logger;
        }



        public override async System.Threading.Tasks.Task HandleAsync(Wolverine.Runtime.MessageContext context, System.Threading.CancellationToken cancellation)
        {
            var paymentReceivedEventHandler = new EStore.Wolverine.Application.EventHandlers.Payments.PaymentReceivedEventHandler();
            await using var eStoreDbContext = new EStore.Wolverine.Infrastructure.Database.Contexts.EStoreDbContext(_dbContextOptions);
            var orderRepository = new EStore.Wolverine.Infrastructure.Database.Repositories.OrderRepository(eStoreDbContext);
            var paymentReceived = (EStore.Wolverine.Domain.Events.PaymentReceived)context.Envelope.Message;
            
            // Enroll the DbContext & IMessagingContext in the outgoing Wolverine outbox transaction
            var envelopeTransaction = Wolverine.EntityFrameworkCore.WolverineEntityCoreExtensions.BuildTransaction(eStoreDbContext, context);
            await context.EnlistInOutboxAsync(envelopeTransaction);
            await paymentReceivedEventHandler.Handle(paymentReceived, cancellation, orderRepository, _logger).ConfigureAwait(false);
            
            // Added by EF Core Transaction Middleware
            var result_of_SaveChangesAsync = await eStoreDbContext.SaveChangesAsync(cancellation).ConfigureAwait(false);

            // If we have separate context for outbox and application, the we need to manually commit the transaction
            if (envelopeTransaction is Wolverine.EntityFrameworkCore.Internals.RawDatabaseEnvelopeTransaction rawTx) { await rawTx.CommitAsync(); }
        }

    }

    // END: PaymentReceivedHandler672329515
    
    
}

